// <auto-generated />
using System;
using FCRA.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FCRA.Repository.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230424094251_ApprovalStatus")]
    partial class ApprovalStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FCRA.Models.Account.FormControlMaster", b =>
                {
                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ControlId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("ControlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.HasKey("FormId", "ControlId");

                    b.ToTable("FormControlMaster");
                });

            modelBuilder.Entity("FCRA.Models.Account.FormControlRoleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ControlId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FormControlRoleMaster");
                });

            modelBuilder.Entity("FCRA.Models.Account.FormMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(7);

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("IconClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<int?>("MenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("FormMaster");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Customer",
                            IconClass = "fas fa-user-friends",
                            IsAdmin = true,
                            MenuId = 1,
                            Name = "Customer",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 7,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Stage",
                            IconClass = "fas fa-user-friends",
                            IsAdmin = true,
                            MenuId = 4,
                            Name = "Stage",
                            Sequence = 8
                        },
                        new
                        {
                            Id = 8,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "RiskType",
                            IconClass = "fas fa-asterisk",
                            IsAdmin = true,
                            MenuId = 4,
                            Name = "Risk Type",
                            Sequence = 9
                        },
                        new
                        {
                            Id = 9,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "GeographicPresence",
                            IconClass = "fas fa-user-friends",
                            IsAdmin = true,
                            MenuId = 4,
                            Name = "Geographic Presence",
                            Sequence = 10
                        },
                        new
                        {
                            Id = 10,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "CustomerSegment",
                            IconClass = "fas fa-user-friends",
                            IsAdmin = true,
                            MenuId = 4,
                            Name = "Business Segment",
                            Sequence = 11
                        },
                        new
                        {
                            Id = 11,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "BusinessSegment",
                            IconClass = "fas fa-briefcase",
                            IsAdmin = true,
                            MenuId = 4,
                            Name = "Sub Unit",
                            Sequence = 12
                        },
                        new
                        {
                            Id = 6,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "GeographyRisk",
                            IconClass = "fas fa-user-friends",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Geography Risk - Country Risk Rating",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 14,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "PreDefinedRiskParameter",
                            IconClass = "fas fa-list-ul",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Pre DefinedRisk Parameter",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 15,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "ProductService",
                            IconClass = "fas fa-credit-card",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Product Service",
                            Sequence = 3
                        },
                        new
                        {
                            Id = 16,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Questions",
                            IconClass = "fas fa-question-circle",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Question",
                            Sequence = 4
                        },
                        new
                        {
                            Id = 17,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "RiskCriteria",
                            IconClass = "fas fa-paw",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Risk Criteria",
                            Sequence = 5
                        },
                        new
                        {
                            Id = 18,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "ProductServiceMapping",
                            IconClass = "fas fa-sitemap",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Risk Factor Product Service Mapping",
                            Sequence = 6
                        },
                        new
                        {
                            Id = 19,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "ProductRiskCriteriaMapping",
                            IconClass = "fas fa-sitemap",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Product Risk Criteria Mapping",
                            Sequence = 7
                        },
                        new
                        {
                            Id = 12,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "RiskFactor",
                            IconClass = "fas fa-industry",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Risk Factor",
                            Sequence = 8
                        },
                        new
                        {
                            Id = 13,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "RiskSubFactor",
                            IconClass = "fa fa-industry",
                            IsAdmin = true,
                            MenuId = 3,
                            Name = "Risk Sub Factor",
                            Sequence = 9
                        },
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "Roles",
                            IconClass = "fas fa-building",
                            IsAdmin = true,
                            MenuId = 2,
                            Name = "Role",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "RolePermissions",
                            IconClass = "fas fa-building",
                            IsAdmin = true,
                            MenuId = 2,
                            Name = "Role Permission",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Area = "Admin",
                            Controller = "User",
                            IconClass = "fas fa-user-tie",
                            IsAdmin = true,
                            MenuId = 2,
                            Name = "User",
                            Sequence = 3
                        },
                        new
                        {
                            Id = 22,
                            Action = "Index",
                            Area = "",
                            Controller = "ExitRemarks",
                            IconClass = "fas fa-comment-dots",
                            IsAdmin = false,
                            MenuId = 2,
                            Name = "Audit Log",
                            Sequence = 4
                        },
                        new
                        {
                            Id = 20,
                            Action = "Index",
                            Area = "",
                            Controller = "RiskAssessment",
                            IconClass = "fas fa-tasks",
                            IsAdmin = false,
                            Name = "Risk Assessment",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 21,
                            Action = "Index",
                            Area = "",
                            Controller = "Home",
                            IconClass = "fas fa-chart-bar",
                            IsAdmin = false,
                            Name = "Summary",
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("FCRA.Models.Account.MenuMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnOrder(2);

                    b.Property<string>("IconClass")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MenuMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconClass = "fas fa-layer-group",
                            IsActive = true,
                            IsAdmin = true,
                            Name = "Masters",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconClass = "fas fa-users",
                            IsActive = true,
                            IsAdmin = true,
                            Name = "User Management",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconClass = "fas fa-user-graduate",
                            IsActive = true,
                            IsAdmin = true,
                            Name = "Customer Details",
                            ParentMenuId = 1,
                            Sequence = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconClass = "fas fa-th-list",
                            IsActive = true,
                            IsAdmin = true,
                            Name = "Mappings",
                            ParentMenuId = 1,
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("FCRA.Models.Account.RoleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserTypeId");

                    b.ToTable("RoleMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Super Admin",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("FCRA.Models.Account.RolePermissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<bool>("Add")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<bool>("Edit")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<bool>("View")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.HasKey("RoleId", "FormId");

                    b.HasIndex("FormId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            FormId = 1,
                            Add = true,
                            Edit = true,
                            FormName = "Role",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 2,
                            Add = true,
                            Edit = true,
                            FormName = "Role Permission",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 3,
                            Add = true,
                            Edit = true,
                            FormName = "User",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 4,
                            Add = true,
                            Edit = true,
                            FormName = "Country",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 5,
                            Add = true,
                            Edit = true,
                            FormName = "Customer",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 6,
                            Add = true,
                            Edit = true,
                            FormName = "Geography Risk - Country Risk Rating",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 7,
                            Add = true,
                            Edit = true,
                            FormName = "Stage",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 8,
                            Add = true,
                            Edit = true,
                            FormName = "Risk Type",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 9,
                            Add = true,
                            Edit = true,
                            FormName = "Geographic Presence",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 10,
                            Add = true,
                            Edit = true,
                            FormName = "Business Segment",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 11,
                            Add = true,
                            Edit = true,
                            FormName = "Sub Unit",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 12,
                            Add = true,
                            Edit = true,
                            FormName = "Risk Factor",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 13,
                            Add = true,
                            Edit = true,
                            FormName = "Risk Sub Factor",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 14,
                            Add = true,
                            Edit = true,
                            FormName = "Pre DefinedRisk Parameter",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 15,
                            Add = true,
                            Edit = true,
                            FormName = "Product Service",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 16,
                            Add = true,
                            Edit = true,
                            FormName = "Question",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 17,
                            Add = true,
                            Edit = true,
                            FormName = "Risk Criteria",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 18,
                            Add = true,
                            Edit = true,
                            FormName = "Risk Factor Product Service Mapping",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 19,
                            Add = true,
                            Edit = true,
                            FormName = "Product Risk Criteria Mapping",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 20,
                            Add = true,
                            Edit = true,
                            FormName = "Risk Assessment",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 21,
                            Add = true,
                            Edit = true,
                            FormName = "Summary",
                            View = true
                        },
                        new
                        {
                            RoleId = 1,
                            FormId = 22,
                            Add = true,
                            Edit = true,
                            FormName = "Audit Log",
                            View = true
                        });
                });

            modelBuilder.Entity("FCRA.Models.Account.UserMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            IsActive = true,
                            Name = "Super Admin",
                            Password = "JbaCWJnsulrNRTnw1k2Ayw=="
                        });
                });

            modelBuilder.Entity("FCRA.Models.Account.UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("FCRA.Models.Account.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Reviewer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Approver"
                        });
                });

            modelBuilder.Entity("FCRA.Models.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int>("ScaleType")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FCRA.Models.Customers.CustomerForm", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.HasKey("CustomerId", "FormId");

                    b.HasIndex("FormId");

                    b.ToTable("CustomerForm");
                });

            modelBuilder.Entity("FCRA.Models.Customers.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(7);

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(8);

                    b.Property<string>("Address3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(9);

                    b.Property<string>("Address4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(10);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(6);

                    b.HasKey("CustomerId", "LocationId");

                    b.HasIndex("CountryId");

                    b.ToTable("CustomerLocation");
                });

            modelBuilder.Entity("FCRA.Models.Customers.CustomerScaleLabel", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ScaleId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.HasKey("CustomerId", "ScaleId");

                    b.HasIndex("ScaleId");

                    b.ToTable("CustomerScaleLabels");
                });

            modelBuilder.Entity("FCRA.Models.Defaults.DefaultScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<int>("RankType")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("ScaleType")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("DefaultScale");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Weak",
                            RankType = 3,
                            ScaleType = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adequate",
                            RankType = 2,
                            ScaleType = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Needs Improvement",
                            RankType = 1,
                            ScaleType = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Weak",
                            RankType = 4,
                            ScaleType = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Adequate",
                            RankType = 3,
                            ScaleType = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "Needs Improvement",
                            RankType = 2,
                            ScaleType = 4
                        },
                        new
                        {
                            Id = 7,
                            Name = "Strong",
                            RankType = 1,
                            ScaleType = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Absent",
                            RankType = 5,
                            ScaleType = 5
                        },
                        new
                        {
                            Id = 9,
                            Name = "Weak",
                            RankType = 4,
                            ScaleType = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Adequate",
                            RankType = 3,
                            ScaleType = 5
                        },
                        new
                        {
                            Id = 11,
                            Name = "Needs Improvement",
                            RankType = 2,
                            ScaleType = 5
                        },
                        new
                        {
                            Id = 12,
                            Name = "Strong",
                            RankType = 1,
                            ScaleType = 5
                        });
                });

            modelBuilder.Entity("FCRA.Models.ExitRemarks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ExitRemarks");
                });

            modelBuilder.Entity("FCRA.Models.Mappings.ProductRiskCriteriaMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("RiskCriteriaId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId", "ProductId", "RiskCriteriaId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("RiskCriteriaId");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProductRiskCriteriaMapping");
                });

            modelBuilder.Entity("FCRA.Models.Mappings.QuestionsRiskCriteriaMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("RiskCriteriaId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId", "ProductId", "RiskCriteriaId", "QuestionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RiskCriteriaId");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("QuestionsRiskCriteriaMapping");
                });

            modelBuilder.Entity("FCRA.Models.Mappings.RiskFactorProductServiceMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int>("ScaleRange2")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int>("ScaleRange3")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("ScaleRange4")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("ScaleRange5")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId", "ProductId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskFactorProductServiceMapping");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovalId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ApprovalHistorys");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ApprovalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("FinalStatus")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<DateTime?>("PendingFrom")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<int>("PendingWithUserType")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ApprovalRequests");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Submitted for Review"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sent back by Reviewer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Submitted for Approval"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sent back by Approver"
                        });
                });

            modelBuilder.Entity("FCRA.Models.Masters.BusinessSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int>("CustomerSegmentId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ScaleRange2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("ScaleRange3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("ScaleRange4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("ScaleRange5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerSegmentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BusinessSegment");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FCRA.Models.Masters.CustomerSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("ExcludeChildCategory")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<int>("GeographicPresenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ScaleRange2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("ScaleRange3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("ScaleRange4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("ScaleRange5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeographicPresenceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CustomerSegment");
                });

            modelBuilder.Entity("FCRA.Models.Masters.GeographicPresence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("ExcludeChildCategory")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int>("RiskTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal>("ScaleRange2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ScaleRange3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("ScaleRange4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<decimal?>("ScaleRange5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(8);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RiskTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GeographicPresence");
                });

            modelBuilder.Entity("FCRA.Models.Masters.GeographyRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int>("RiskRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GeographyRisk");
                });

            modelBuilder.Entity("FCRA.Models.Masters.PreDefinedRiskParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PreDefinedRiskParameter");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ProductService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProductService");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("Scale1Value")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("Scale2Value")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("Scale3Value")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("Scale4Value")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("Scale5Value")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskCriteria");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BusinessSegmentId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<int?>("CustomerSegmentId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int?>("GeographicPresenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<bool>("IsExcludedInRisk")
                        .HasColumnType("bit")
                        .HasColumnOrder(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<int>("RiskRangeParameter")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<int?>("RiskTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("ScaleRange2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(9);

                    b.Property<decimal>("ScaleRange3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(10);

                    b.Property<decimal?>("ScaleRange4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(11);

                    b.Property<decimal?>("ScaleRange5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(12);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.Property<decimal>("WeightPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerSegmentId");

                    b.HasIndex("GeographicPresenceId");

                    b.HasIndex("RiskTypeId");

                    b.HasIndex("StageId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskFactor");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("ExcludeChildCategory")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ScaleRange2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<decimal>("ScaleRange3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("ScaleRange4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("ScaleRange5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StageId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskType");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("ExcludeChildCategory")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<decimal>("ScaleRange2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(3);

                    b.Property<decimal>("ScaleRange3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<decimal?>("ScaleRange4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("ScaleRange5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskFactorResponse", b =>
                {
                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<decimal>("TotalWeightedScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("RiskFactorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskFactorResponse");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskScoreProductVolumRatingResponse", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int?>("FinalScore")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int>("RiskRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnOrder(9);

                    b.Property<int?>("TotalScore")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.Property<decimal?>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(11);

                    b.Property<decimal?>("Values")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(10);

                    b.Property<decimal?>("Volume")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId", "ProductId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskScoreProductVolumRatingResponse");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskScoreResponse", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("RiskCriteriaId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("Answers")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(9);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("QuestionIds")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(8);

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId", "ProductId", "RiskCriteriaId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("RiskCriteriaId");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskScoreResponse");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskSubFactorAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskSubFactorAttachment");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskSubFactorResponse", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("Assumptions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<int?>("PreDefinedParameterId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<decimal?>("Response")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<string>("ResponseDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(9);

                    b.Property<int?>("ScaleResponse")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PreDefinedParameterId");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskSubFactorResponse");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskSubFactorVolumeResponse", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("RiskSubFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("Countries")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(25);

                    b.Property<string>("CountryWiseRating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(26);

                    b.Property<string>("CountryWiseVolume")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(27);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<decimal?>("Score1")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("Score2")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("Score3")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<decimal?>("Score4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(8);

                    b.Property<decimal?>("Score5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(9);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.Property<decimal?>("Volume1")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(10);

                    b.Property<decimal?>("Volume2")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(11);

                    b.Property<decimal?>("Volume3")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(12);

                    b.Property<decimal?>("Volume4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(13);

                    b.Property<decimal?>("Volume5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(14);

                    b.Property<decimal?>("Weight1")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(15);

                    b.Property<decimal?>("Weight2")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(16);

                    b.Property<decimal?>("Weight3")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(17);

                    b.Property<decimal?>("Weight4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(18);

                    b.Property<decimal?>("Weight5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(19);

                    b.Property<decimal?>("WeightedScore1")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(20);

                    b.Property<decimal?>("WeightedScore2")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(21);

                    b.Property<decimal?>("WeightedScore3")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(22);

                    b.Property<decimal?>("WeightedScore4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(23);

                    b.Property<decimal?>("WeightedScore5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(24);

                    b.HasKey("CustomerId", "RiskFactorId", "RiskSubFactorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("RiskSubFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskSubFactorVolumeResponse");
                });

            modelBuilder.Entity("FCRA.Models.RiskSubFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10002);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10003);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(29);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(10001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<decimal?>("Number2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(23);

                    b.Property<decimal?>("Number3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(24);

                    b.Property<decimal?>("Number4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(25);

                    b.Property<decimal?>("Number5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(26);

                    b.Property<decimal?>("Percentage2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(4);

                    b.Property<decimal?>("Percentage3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("Percentage4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("Percentage5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(7);

                    b.Property<int?>("PreDefinedParameter1Id")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("PreDefinedParameter2Id")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("PreDefinedParameter3Id")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("PreDefinedParameter4Id")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<int?>("PreDefinedParameter5Id")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<string>("RiskDescription1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(13);

                    b.Property<string>("RiskDescription2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(14);

                    b.Property<string>("RiskDescription3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(15);

                    b.Property<string>("RiskDescription4")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(16);

                    b.Property<string>("RiskDescription5")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(17);

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<decimal?>("RiskVolume1")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(18);

                    b.Property<decimal?>("RiskVolume2")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(19);

                    b.Property<decimal?>("RiskVolume3")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(20);

                    b.Property<decimal?>("RiskVolume4")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(21);

                    b.Property<decimal?>("RiskVolume5")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(22);

                    b.Property<decimal?>("RiskWeightage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(27);

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnOrder(28);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(10004);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10005);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreDefinedParameter1Id");

                    b.HasIndex("PreDefinedParameter2Id");

                    b.HasIndex("PreDefinedParameter3Id");

                    b.HasIndex("PreDefinedParameter4Id");

                    b.HasIndex("PreDefinedParameter5Id");

                    b.HasIndex("RiskFactorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RiskSubFactor");
                });

            modelBuilder.Entity("FCRA.Models.Account.FormControlMaster", b =>
                {
                    b.HasOne("FCRA.Models.Account.FormMaster", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FCRA.Models.Account.FormControlRoleMaster", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.FormMaster", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.RoleMaster", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Form");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Account.FormMaster", b =>
                {
                    b.HasOne("FCRA.Models.Account.MenuMaster", "MenuMaster")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MenuMaster");
                });

            modelBuilder.Entity("FCRA.Models.Account.MenuMaster", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Account.RoleMaster", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("FCRA.Models.Account.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("FCRA.Models.Account.RolePermissions", b =>
                {
                    b.HasOne("FCRA.Models.Account.FormMaster", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.RoleMaster", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FCRA.Models.Account.UserMaster", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("FCRA.Models.Account.RoleMaster", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Account.UserRoles", b =>
                {
                    b.HasOne("FCRA.Models.Account.RoleMaster", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FCRA.Models.Customers.Customer", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Customers.CustomerForm", b =>
                {
                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany("Forms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.FormMaster", "FormMaster")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FormMaster");
                });

            modelBuilder.Entity("FCRA.Models.Customers.CustomerLocation", b =>
                {
                    b.HasOne("FCRA.Models.Masters.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany("Locations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FCRA.Models.Customers.CustomerScaleLabel", b =>
                {
                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany("Scales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Defaults.DefaultScale", "DefaultScale")
                        .WithMany()
                        .HasForeignKey("ScaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DefaultScale");
                });

            modelBuilder.Entity("FCRA.Models.ExitRemarks", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Mappings.ProductRiskCriteriaMapping", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.ProductService", "ProductService")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskCriteria", "RiskCriteria")
                        .WithMany()
                        .HasForeignKey("RiskCriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("ProductService");

                    b.Navigation("RiskCriteria");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Mappings.QuestionsRiskCriteriaMapping", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.ProductService", "ProductService")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskCriteria", "RiskCriteria")
                        .WithMany()
                        .HasForeignKey("RiskCriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("ProductService");

                    b.Navigation("Questions");

                    b.Navigation("RiskCriteria");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Mappings.RiskFactorProductServiceMapping", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.ProductService", "ProductService")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("ProductService");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ApprovalHistory", b =>
                {
                    b.HasOne("FCRA.Models.Masters.ApprovalRequest", "ApprovalRequests")
                        .WithMany()
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApprovalRequests");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ApprovalRequest", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.BusinessSegment", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.CustomerSegment", "CustomerSegment")
                        .WithMany("BusinessSegments")
                        .HasForeignKey("CustomerSegmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("CustomerSegment");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Country", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.CustomerSegment", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.GeographicPresence", "GeographicPresence")
                        .WithMany("CustomerSegments")
                        .HasForeignKey("GeographicPresenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("GeographicPresence");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.GeographicPresence", b =>
                {
                    b.HasOne("FCRA.Models.Masters.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskType", "RiskType")
                        .WithMany("GeographicPresences")
                        .HasForeignKey("RiskTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("RiskType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.GeographyRisk", b =>
                {
                    b.HasOne("FCRA.Models.Masters.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.PreDefinedRiskParameter", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.ProductService", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Questions", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.ProductService", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskCriteria", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskFactor", b =>
                {
                    b.HasOne("FCRA.Models.Masters.BusinessSegment", "BusinessSegment")
                        .WithMany("RiskFactors")
                        .HasForeignKey("BusinessSegmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.CustomerSegment", "CustomerSegment")
                        .WithMany()
                        .HasForeignKey("CustomerSegmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.GeographicPresence", "GeographicPresence")
                        .WithMany()
                        .HasForeignKey("GeographicPresenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.RiskType", "RiskType")
                        .WithMany()
                        .HasForeignKey("RiskTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BusinessSegment");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("CustomerSegment");

                    b.Navigation("GeographicPresence");

                    b.Navigation("RiskType");

                    b.Navigation("Stage");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskType", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.Stage", "Stage")
                        .WithMany("RiskTypes")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Stage");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Stage", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskFactorResponse", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("RiskFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskScoreProductVolumRatingResponse", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.ProductService", "ProductService")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("ProductService");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskScoreResponse", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.ProductService", "ProductService")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskCriteria", "RiskCriteria")
                        .WithMany()
                        .HasForeignKey("RiskCriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("ProductService");

                    b.Navigation("RiskCriteria");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskSubFactorAttachment", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "SubFactor")
                        .WithMany("riskSubFactorAttachment")
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("SubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskSubFactorResponse", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.PreDefinedRiskParameter", "PreDefinedRiskParameter")
                        .WithMany()
                        .HasForeignKey("PreDefinedParameterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("PreDefinedRiskParameter");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Responses.RiskSubFactorVolumeResponse", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.RiskSubFactor", "RiskSubFactor")
                        .WithMany()
                        .HasForeignKey("RiskSubFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("RiskFactor");

                    b.Navigation("RiskSubFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.RiskSubFactor", b =>
                {
                    b.HasOne("FCRA.Models.Account.UserMaster", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Masters.PreDefinedRiskParameter", "PreDefinedRiskParameter1")
                        .WithMany()
                        .HasForeignKey("PreDefinedParameter1Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.PreDefinedRiskParameter", "PreDefinedRiskParameter2")
                        .WithMany()
                        .HasForeignKey("PreDefinedParameter2Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.PreDefinedRiskParameter", "PreDefinedRiskParameter3")
                        .WithMany()
                        .HasForeignKey("PreDefinedParameter3Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.PreDefinedRiskParameter", "PreDefinedRiskParameter4")
                        .WithMany()
                        .HasForeignKey("PreDefinedParameter4Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.PreDefinedRiskParameter", "PreDefinedRiskParameter5")
                        .WithMany()
                        .HasForeignKey("PreDefinedParameter5Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FCRA.Models.Masters.RiskFactor", "RiskFactor")
                        .WithMany("RiskSubFactors")
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FCRA.Models.Account.UserMaster", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("PreDefinedRiskParameter1");

                    b.Navigation("PreDefinedRiskParameter2");

                    b.Navigation("PreDefinedRiskParameter3");

                    b.Navigation("PreDefinedRiskParameter4");

                    b.Navigation("PreDefinedRiskParameter5");

                    b.Navigation("RiskFactor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FCRA.Models.Account.UserMaster", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FCRA.Models.Customers.Customer", b =>
                {
                    b.Navigation("Forms");

                    b.Navigation("Locations");

                    b.Navigation("Scales");
                });

            modelBuilder.Entity("FCRA.Models.Masters.BusinessSegment", b =>
                {
                    b.Navigation("RiskFactors");
                });

            modelBuilder.Entity("FCRA.Models.Masters.CustomerSegment", b =>
                {
                    b.Navigation("BusinessSegments");
                });

            modelBuilder.Entity("FCRA.Models.Masters.GeographicPresence", b =>
                {
                    b.Navigation("CustomerSegments");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskFactor", b =>
                {
                    b.Navigation("RiskSubFactors");
                });

            modelBuilder.Entity("FCRA.Models.Masters.RiskType", b =>
                {
                    b.Navigation("GeographicPresences");
                });

            modelBuilder.Entity("FCRA.Models.Masters.Stage", b =>
                {
                    b.Navigation("RiskTypes");
                });

            modelBuilder.Entity("FCRA.Models.RiskSubFactor", b =>
                {
                    b.Navigation("riskSubFactorAttachment");
                });
#pragma warning restore 612, 618
        }
    }
}
